sidebar-global-settings=全局配置
sidebar-registry-center=注册中心配置
sidebar-service-operation=服务管理
sidebar-client-dimension=客户端维度
sidebar-server-dimension=服务端维度
sidebar-help=帮助

switch-language=选择语言
language-zh=中文
language-en=English

eagle=Eagle

switch-theme-title=更改主题
switch-theme-blue=蓝色
switch-theme-white=白色
switch-theme-purple=紫色
switch-theme-green=绿色
switch-theme-yellow=黄色
switch-theme-red=红色
switch-theme-blue-light=蓝色高亮
switch-theme-white-light=白色高亮
switch-theme-purple-light=紫色高亮
switch-theme-green-light=绿色高亮
switch-theme-yellow-light=黄色高亮
switch-theme-red-light=红色高亮

registry-center-dimension=切换注册中心
add-registry-center=添加注册中心
registry-center-name=注册中心名称
registry-center-zk-address=注册中心地址
registry-center-namespace=命名空间
registry-center-digest=登录凭证
registry-center-name-not-null=注册中心名称不能为空
registry-center-name-length-limit=注册中心名称长度不能超过50字符大小
registry-center-existed=注册中心已经存在
registry-center-zk-address-not-null=注册中心地址不能为空
registry-center-zk-address-length-limit=注册中心地址长度不能超过100字符大小
registry-center-namespace-length-limit=命名空间长度不能超过50字符大小
registry-center-digest-length-limit=登录凭证长度不能超过20字符大小
registry-center-connect-failed=操作未成功，原因：连接失败，请检查注册中心配置


protocol=协议名称
serialization=序列化方式
service-name=接口名称
host=服务地址
process=进程号
codec=通信协议
actives=最大并发
max-content-length=传输最大字节数
actives-wait=并发等待时间
check=启动检测服务
compress=启动压缩
use-native=启动epoll
use-default=协议是否启用
cluster=服务集群管理
heartbeat-factory=心跳工厂
heartbeat=心跳间隔
version=版本号
stats-log=统计日志
retries=重试次数
callback-thread=回调执行线程数
callback-queue-size=回调执行队列大小
callback-wait-time=回调执行预警时长
request-timeout=接口请求超时时间
connect-timeout=连接超时时间
idle-time=连接空闲时间
min-client-connection=最小连接数
max-client-connection=最大连接数
max-invoke-error=连续失败最大次数
loadbalance=负载策略
ha-strategy=高可用策略
max-lifetime=连接生命期
group=服务组
request-timeout-should-be-integer=请求超时时间应该为正整数
connect-timeout-should-be-integer=连接超时时间应该为正整数
idle-time-should-be-integer=连接空闲时间应该为正整数
min-client-connection-should-be-integer=最小连接数应该为正整数
max-client-connection-should-be-integer=最大连接数应该为正整数
max-invoke-error-should-be-integer=最大连续失败数应该为正整数
weight-should-be-integer=权重值应该为正整数
update-config=修改配置
port=端口号
weight=调用权重
select-thread-size=处理io线程数
core-worker-thread=处理业务核心线程数
max-worker-thread=处理业务最大线程数
worker-queue-size=执行业务队列长度
max-server-connection=最大连接数
callback=异步回调

placeholder-host=客户端或服务端ip
placeholder-process=订阅服务的进程号
placeholder-codec=通信协议实现
placeholder-actives=接口调用并发控制，配置为0表示不进行并发控制
placeholder-actives-wait=当达到最大并发数时，等待多长时间放弃该次调用
placeholder-max-content-length=传输的最大字节数
placeholder-check=启动检测服务
placeholder-use-native=linux下是否启用epoll
placeholder-compress=是否开启gzip压缩
placeholder-use-default=是否将此协议设为默认，多个默认协议调用会优先第一个，如果调用失败才换成下一个协议
placeholder-cluster=客户端集群管理实现
placeholder-heartbeat-factory=心跳包创建工厂类实现
placeholder-heartbeat=心跳时间间隔，单位s
placeholder-version=服务版本号
placeholder-stats-log=统计日志名称，如果配置了统计日志，则会把服务的调用时间、tps等信息写入此日志
placeholder-retries=失败重试次数，如果为0则不重试
placeholder-callback-thread=异步接口回调执行线程数，设置了回调该配置才生效
placeholder-callback-queue-size=异步接口回调执行队列长度，设置了回调该配置才生效
placeholder-callback-wait-time=当异步接口回调任务运行紧张时，并且队头的任务等待时间（ms）超过该值则进行接口保护，设置了回调该配置才生效
placeholder-request-timeout=接口请求超时时间，单位ms
placeholder-connect-timeout=获取连接超时时间，单位ms
placeholder-idle-time=连接空闲时间，超过此时间连接会被回收，单位ms。
placeholder-min-client-connection=与服务端维持的最小连接数
placeholder-max-client-connection=与服务端维持的最大连接数
placeholder-max-invoke-error=如果服务连续调用失败超过该次数，就会将服务设为不可用，如果服务恢复正常，心跳检测会重新使该服务生效
placeholder-loadbalance=负载均衡策略，目前支持random（随机）、roundrobin（轮询）、activeWeigth（以调用量小的优先）、weight（根据配置的权重选择）
placeholder-ha-strategy=ha策略，目前支持failover、failfast
placeholder-max-lifetime=每个连接的生命周期（ms），如果一个连接超过了生命周期，会关闭。

placeholder-port=服务暴露的端口号
placeholder-weight=服务调用权重，与weight负载均衡算法联合使用
placeholder-select-thread-size=服务端处理io线程数
placeholder-max-server-connection=服务端每个端口接受的最大连接数，如果超过此连接数，就会关闭新的连接
placeholder-core-worker-thread=执行业务核心线程数
placeholder-max-worker-thread=执行业务最大线程数
placeholder-worker-queue-size=执行业务队列长度

operation=操作
operation-add=添加
operation-submit=提交
operation-confirm=确认
operation-cancel=关闭
operation-delete=删除
operation-trigger=触发
operation-shutdown=终止
operation-remove=删除
operation-reset=重置
operation-test-connect=测试连接
operation-connect=连接
operation-enable=生效
operation-disable=失效
operation-detail=详情
operation-update=修改

status=状态
status-running=运行中
status-sharding-flag=分片待调整
status-staging=等待运行
status-crashed=已下线
status-ok=正常
status-task-failed=运行失败
status-task-finished=已完成
status-task-error=启动失败
status-task-killed=主动终止
status-connected=已连
status-enabled=已启用
status-disabled=已失效
status-offline=已下线

registry-config-title=注册中心的配置（eagle:registry）
registry-config-info-1=name: 注册中心的名称，如果没有配置id，会用name当id。
registry-config-info-2=protocol: 注册中心协议，目前只支持zookeeper。
registry-config-info-3=address: 注册中心地址，如果是多个地址以逗号分隔，如果是多组用|或;分隔。
registry-config-info-4=namespace: zk上的命名空间，所有的信息都在该命名空间下。
registry-config-info-5=max-retries: 连接注册中心的重试次数。
registry-config-info-6=base-sleep-time-milliseconds: 重试时间间隔。
registry-config-info-7=max-sleep-time-milliseconds: 最大重试时间。
registry-config-info-8=session-timeout-milliseconds: 与注册中心的会话超时时间。
registry-config-info-9=digest: 连接注册中心的密码。


protocol-config-title=协议配置 (eagle:protocol）
protocol-config-info-1=name: 协议名称,目前只支持eagle，后续加入thrift，如果没有配置id，name会充当id。
protocol-config-info-2=serialization: 序列化，支持hessian、kryo、protobuf序列化协议。
protocol-config-info-3=heartbeat-factory: 心跳工厂,默认值是eagle,通过spi方式可以自定义心跳工厂。
protocol-config-info-4=select-thread-size: netty处理io的线程数，尽量不要阻塞netty的io线程。
protocol-config-info-5=core-worker-thread: 处理业务的核心线程数。
protocol-config-info-6=max-worker-thread: 处理业务的最大线程数。
protocol-config-info-7=max-content-length: rpc调用最大传输的字节数。
protocol-config-info-8=max-server-connection: 一个端口支持的最大连接数。
protocol-config-info-9=codec: 用于编码和解码的工具类，默认调用EagleCodec，可以通过spi的方式自定义codec。
protocol-config-info-10=use-native: 在linux环境下，是否开启epoll。默认是true。


client-config-title=客户端配置（eagle:refer）
client-config-info-1=group: 调用组，客户端和服务端配置要一致。
client-config-info-2=version: 版本号，区分相同服务的不同版本，客户端与服务端的版本号一致才能调用成功。
client-config-info-3=retries: 调用失败重试次数。
client-config-info-4=actives: 支持的最大并发数。
client-config-info-5=actives-wait: 并发达到最大后等待多长时间。
client-config-info-6=check: 启动时是否检测有服务，默认false。
client-config-info-7=registry: 注册中心，多个注册中心以逗号分隔。
client-config-info-8=host: ip地址，一般不需要指定，系统会自动获取，如果特殊需求可自己设定。
client-config-info-9=request-timeout: 请求超时时间。
client-config-info-10=min-client-connection: 最小连接数。
client-config-info-11=max-client-connection: 最大连接数。
client-config-info-12=idle-time: 连接空闲多长时间会被回收。
client-config-info-13=max-invoke-error: 连续调用失败的的次数，超过这个次数，这个服务设置为不可用。
client-config-info-14=compress: 是否开启gzip压缩。
client-config-info-15=loadbalance: 负载均衡策略，目前支持random（随机）、roundrobin（轮询）、activeWeigth（以调用量小的优先）、weight（根据配置的权重选择）。
client-config-info-16=ha-strategy: ha策略，目前支持failover、failfast。
client-config-info-17=interface: 服务的接口。
client-config-info-18=callback: 回调，如果设置了回调，该服务就会变成异步。
client-config-info-19=callback-thread: 回调执行线程池的大小。
client-config-info-20=callback-queue-size: 回调任务队列大小。
client-config-info-21=callback-wait-time: 回调任务执行等待时间与request-timeout不同,如果异步任务队列超过设定阈值并且任务等待时间过长，则将此服务设置为不可用，直到任务队列在合理范围内。
client-config-info-22=base-refer: 公共的refer配置。
client-config-info-23=stats-log: 统计log的名称，如果配置了该名称，则会把接口方法的调用时间、tps等信息写入此log，方便查看接口的性能。

server-config-title=服务端配置（eagle:service）
server-config-info-1=group: 调用组，客户端和服务端配置要一致。
server-config-info-2=version: 版本号，区分相同服务的不同版本，客户端与服务端的版本号一致才能调用成功。
server-config-info-3=registry: 注册中心，多个注册中心以逗号分隔。
server-config-info-4=host: ip地址，一般不需要指定，系统会自动获取，如果特殊需求可自己设定。
server-config-info-5=interface: 服务的接口。
server-config-info-6=base-service: 公共的service配置。
server-config-info-7=ref: 接口的实现类引用。
server-config-info-8=class: 如果没有配置ref，会根据class加载接口实现类。
server-config-info-9=export: 服务暴露的协议和端口号，多个用逗号分割，如proto:7000,proto:8000，proto是协议的id。
server-config-info-10=weight: 权重，与权重负载均衡算法联合使用。

operation-succeed=操作已成功完成
